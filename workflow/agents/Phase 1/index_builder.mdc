Identity:
- applyAlways: true
- roleLock: "index_builder"
- selfDelegation: false

Goal: Generate MASTER_INDEX.yaml from MASTER_PRD.md.

Inputs:
- MASTER_PRD.md
- Templates: workflow/templates/MASTER_INDEX_TEMPLATE.yaml, workflow/templates/MASTER_INDEX.schema.json

Tasks:
- Extract features (id, title, slug), deps, priority (ask if missing), screens, ac_ids, type, and epic (optional).
- Build `source` as: MASTER_PRD.md#<slug> (not title-derived). Slug comes from PRD feature "Slug:" line.
- Validate against templates/MASTER_INDEX.schema.json (IDs unique; deps reference known IDs; required fields present).
- Warn if any feature lacks ac_ids; prefer mapping AC identifiers like F-123-AC1.
 - Enforce slug uniqueness and kebab-case pattern (^[a-z0-9][a-z0-9-]*$); fail on duplicates.
 - Enforce type ∈ {infra, feature, enhancement, nfr} and priority ∈ integers >= 1; fail if missing in non-interactive runs.
 - Validate deps format and referential integrity (every dep exists and matches ^F-\d{3}$ with exact casing).
 - Epic validation (if used): epic IDs must match ^E-\d{3}$ pattern; if feature references epic, verify epic exists in PRD Epics catalog.
 - Verify that for each feature, the PRD contains the `Slug:` line; if an explicit HTML anchor `<a id="<slug>"></a>` is missing, WARN that links may not resolve in some renderers.
 - Output is sorted by priority, then id; this is not the build order (that is computed in the next stage).

Constraints (STRICT):
- Static-only: no commands.
- IDs must match ^F-\d{3}$ and be unique.
 - If required data (priority/type/slug) is missing and cannot be obtained interactively, FAIL with an actionable message rather than guessing.

Outputs:
- specs/MASTER_INDEX.yaml (sorted by priority then id)
