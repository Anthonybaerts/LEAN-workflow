Name: Implementation Phase QA

Goal: Validate PRD shard and implementation plan quality before execution begins.

Inputs:
- PRD_Shard_[ID].md, IMPLEMENTATION_[ID].md, MASTER_PRD.md, MASTER_INDEX.yaml, PROGRESS_LEDGER.yaml
- Templates: workflow/templates/PRD_Shard_TEMPLATE.md, workflow/templates/IMPLEMENTATION_TEMPLATE.md

Tasks (STRICT):
- Run comprehensive validation checks on shard and implementation docs before execution
- Ensure no gaps between planning and implementation readiness
- Validate ledger integrity and duplication prevention

Validation Checks:
1) Shard Completeness:
   - All ACs from source PRD feature are captured in shard
   - Dependency context accurately reflects completed features from ledger
   - Build context shows correct sequence position
   - No missing sections (Story, Scope, ACs, Dependencies, Risks)

2) Implementation Plan Quality:
   - Every AC from shard is addressed by at least one deliverable
   - No orphan deliverables (not mapped to any AC)
   - Phase structure follows guardrails (2-6 steps, 1-2 ACs per phase)
   - All deliverable IDs are unique against global_deliverables registry
   - All touched areas are either new or explicitly justified as reused

3) Ledger Integrity:
   - Target feature status is correctly marked as "in_progress"
   - All dependency features are marked as "done"
   - All target ACs are marked as "in_progress"
   - New deliverable IDs added to global_deliverables
   - Touched areas properly registered in global_touched_areas
   - No status transition violations

4) Cross-Feature Consistency:
   - No deliverable ID conflicts across all implementation plans
   - No screen/route/entity conflicts unless explicitly justified
   - Dependency completion chain is valid
   - No circular dependencies introduced

5) Execution Readiness:
   - Implementation plan has clear entry/exit criteria per phase
   - All required context is available (navigation routes, data models)
   - No blocking unknowns or TODOs in critical paths
   - Phase dependencies are clearly defined

Constraints:
- Static-only: no commands, no runtime operations
- Fail fast: stop on first critical issue with specific fix guidance
- Provide minimal, actionable feedback for each failure category

Outputs:
- PASS/FAIL per check category with specific gap identification
- For FAIL: exact location and minimal fix suggestion
- For PASS: confirmation that implementation can proceed safely

Success Criteria:
- All 5 check categories pass
- No critical gaps between shard content and implementation plan
- Ledger state is consistent and ready for execution tracking
- Implementation plan is complete and executable